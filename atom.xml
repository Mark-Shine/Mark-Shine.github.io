<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Mark Shang]]></title>
  <subtitle><![CDATA[To be a good man]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://lifeofszh.cn/"/>
  <updated>2016-03-14T03:15:50.000Z</updated>
  <id>http://lifeofszh.cn/</id>
  
  <author>
    <name><![CDATA[Mark]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[新建Hexo博客]]></title>
    <link href="http://lifeofszh.cn/2016/03/14/%E6%96%B0%E5%BB%BAHexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://lifeofszh.cn/2016/03/14/新建Hexo博客/</id>
    <published>2016-03-14T03:02:05.000Z</published>
    <updated>2016-03-14T03:15:50.000Z</updated>
    <content type="html"><![CDATA[<h3 id="scriptogr-am"><a href="#scriptogr-am" class="headerlink" title="scriptogr.am"></a>scriptogr.am</h3><p>一天突然发现scriptogr 关门大吉，也没有一封邮件通知用户，一脸怨念。</p>
<blockquote>
<p>Since September 28th 2015 Scriptogram officially closed. We considered<br>every option before making the difficult decision to end the product.<br>But sometimes there is only one reasonable way out.</p>
<p>Finally, we would like to thank all our dedicated users through the<br>years.</p>
<p>Thank you guys!</p>
</blockquote>
<h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>不想折腾了，想想还是在github做静态页面安逸。就整了个域名，部署起来。头疼的是原来博客虽然有存档，但是在hexo中支持不是很好，会有报错。<br>比如Django的模版标签，Title 不识别，需要转化为title。 </p>
<p>顺便也是整理了原来的博客</p>
<h4 id="u53C2_u8003_u94FE_u63A5"><a href="#u53C2_u8003_u94FE_u63A5" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="http://ibruce.info/2013/11/22/hexo-your-blog/" target="_blank" rel="external">hexo 你的博客</a><br><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 介绍及文档</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="scriptogr-am"><a href="#scriptogr-am" class="headerlink" title="scriptogr.am"></a>scriptogr.am</h3><p>一天突然发现scriptogr 关门大吉，也没有一封邮件通知]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[微信接口计划搁浅]]></title>
    <link href="http://lifeofszh.cn/2014/07/03/%E5%BE%AE%E4%BF%A1%E6%8E%A5%E5%8F%A3%E8%AE%A1%E5%88%92%E6%90%81%E6%B5%85/"/>
    <id>http://lifeofszh.cn/2014/07/03/微信接口计划搁浅/</id>
    <published>2014-07-03T01:44:00.000Z</published>
    <updated>2016-03-14T02:41:14.000Z</updated>
    <content type="html"><![CDATA[<p>计划添加以下几个微信功能：</p>
<ul>
<li>生成事件二维码</li>
<li>扫码响应，用户注册或登录网站</li>
</ul>
<p>不过断断续续折腾了几天以后，发现现在的微信平台和刚刚出来时，有较大区别。之前的平台是支持高级接口的。但是现在的是需要用户申请服务号认证，一年免费使用，之后则必须缴纳300元年审费用。</p>
<p>被坑了一把，申请了订阅号，没有高级接口功能。只能暂时消停下，把构思的功能先放放了。</p>
<h3 id="u559C_u5F53_u7239_uFF0C_u513F_u5B50_u51FA_u4E16"><a href="#u559C_u5F53_u7239_uFF0C_u513F_u5B50_u51FA_u4E16" class="headerlink" title="喜当爹，儿子出世"></a>喜当爹，儿子出世</h3><p>27号，等了10多个小时，儿子终于出世，真是苦了老婆大人了。 </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>计划添加以下几个微信功能：</p>
<ul>
<li>生成事件二维码</li>
<li>扫码响应，用户注册或登录网站</li>
</ul>
<p>不过断断续续折腾了几天以后，发现现在的微信平台和刚刚出来时，有较大区别。之前的平台是支持高级接口的。但是现在的是需要用户申请服务]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django 实时系统的另类实现]]></title>
    <link href="http://lifeofszh.cn/2014/06/16/django%20realtime%20by%20redis%20tornado%20sse/"/>
    <id>http://lifeofszh.cn/2014/06/16/django realtime by redis tornado sse/</id>
    <published>2014-06-15T16:00:00.000Z</published>
    <updated>2016-03-14T02:49:11.000Z</updated>
    <content type="html"><![CDATA[<h4 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h4><p>基于Tornado, Redis, Django, SSE协议 实现Django的实时通信系统</p>
<h4 id="u7F18_u8D77"><a href="#u7F18_u8D77" class="headerlink" title="缘起"></a>缘起</h4><p>业务上要求能够实现一旦服务器收到警报，立刻将信息反馈到页面——简单地说，就是弹框加BIBI声。</p>
<h4 id="u89D2_u8272"><a href="#u89D2_u8272" class="headerlink" title="角色"></a>角色</h4><p>由于Django不支持异步，所以本质上是无法满足实时的要求——他一个请求进来是block住的，直到任务完成才返回。 即使是用uwsgi技术，也只能将可处理的线程支撑到两位数以下。</p>
<p>Tornado天生支持异步，当然也可以用Flask。</p>
<p>听Alex Maccaw说SSE（ Server-Sent Events）比Websocket更好。举个简单的例子，SSE不需要特殊的协议支持，因为它是基于传统的HTTP，而Websocket则是需要full-duplex connections。其次Websocket缺少一些工程设计，而SSE能够设定自动重新连接, 事件ID, 和发送结构化数据。<br>更多的信息，可以参考<a href="http://www.html5rocks.com/en/tutorials/eventsource/basics/" target="_blank" rel="external">Stream Updates with Server-Sent Events
</a>，<a href="http://blog.alexmaccaw.com/killing-a-library" target="_blank" rel="external">Killing a library</a>（用ruby实现了SSE，略简单）</p>
<p>迫于工程项目的紧急性，只能找现成的轮子——今天的主角<a href="https://github.com/truetug/tornado-sse" target="_blank" rel="external">Tornado-sse</a></p>
<p>需要的安装Django-sse（Django内发送信息到redis）, sse（将信息处理成符合sse标准的包）, redis（Django和Tornado通信）。</p>
<h4 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h4><p>在Django的setting文件中添加</p>
<pre><code>### SSE ###
INSTALLED_APPS += (
&apos;redis&apos;,
&apos;django_sse&apos;,
&apos;tornado_sse&apos;,
)

REDIS_SSEQUEUE_CONNECTION_SETTINGS = {
&apos;location&apos;: &apos;localhost:6379&apos;,
&apos;db&apos;: 0,
}
### SSE ###
</code></pre><p>在tasks.py文件（就是你用来执行任务的文件）</p>
<pre><code>from django_sse.redisqueue import send_event
def notify(message):

    info = json.dumps({
    &apos;type&apos;: &apos;foo&apos;,
    &apos;html&apos;: message,
    })

    send_event(&apos;message&apos;, info, &apos;sse&apos;) # 默认频道
    return True
当然我建议将这个函数设置为signal触发
</code></pre><p>在base.html中加入</p>
<pre><code>    &lt;head&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;tornado_sse/jquery.eventsource.js&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot; src=&quot;tornado_sse/sse.js&quot;&gt;&lt;/script&gt;
    &lt;/head&gt;

&lt;body sse-data=&quot;/sse/&quot;&gt;
&lt;/body&gt;
如果是本地的话，需要修改为127.0.0.1:8888/
</code></pre><p>服务器环境如果是Apache</p>
<pre><code>&lt;Location /sse&gt;
ProxyPass http://localhost:8888
   &lt;/Location&gt;
</code></pre><p>如果是nginx:</p>
<pre><code>    location /sse/ {
    rewrite                 ^(.*)$ / break; # to root of our tornado
    proxy_buffering         off; # to push immediately
    proxy_pass              http://127.0.0.1:8888;
}
</code></pre><p>最后启动：</p>
<ol>
<li>redis: nohup redis-server &amp;</li>
<li>django:python manage.py runserver</li>
<li>python server.py (服务端可以用supervisord控制tornado服务)</li>
</ol>
<h4 id="u8865_u5145"><a href="#u8865_u5145" class="headerlink" title="补充"></a>补充</h4><p>因为项目原先采用RabbitMQ来做信息分发、Celery任务执行，不过因为时间不够，只能临时先用redis顶着。 如果是RabbitMQ，就需要用Pika来实现具体<a href="http://pika.readthedocs.org/en/latest/examples/tornado_consumer.html" target="_blank" rel="external">参考</a>    </p>
<p>以上也只利用SSE获取通知，并有深入的处理信息和按频道分发——后面会增加按团队来分发通知的功能。Tornado-sse的源码很短，各位可以细细读读，机制和Websocket的实现是类似的，基于事件嘛。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="u6982_u8FF0"><a href="#u6982_u8FF0" class="headerlink" title="概述"></a>概述</h4><p>基于Tornado, Redis, Django, SSE协议 实现Django的实时通信系统</p>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django signal 介绍]]></title>
    <link href="http://lifeofszh.cn/2014/06/12/django-signal-/"/>
    <id>http://lifeofszh.cn/2014/06/12/django-signal-/</id>
    <published>2014-06-11T16:00:00.000Z</published>
    <updated>2016-03-14T02:37:42.000Z</updated>
    <content type="html"><![CDATA[<p>Django 的Signal，它是同步的，意思是一个请求进来，如果有要出发signal ，就必须等这个signal处理完成，才能返回该请求。</p>
<p>那么他有什么用处呢？<br>剥离和业务无关的逻辑，简化主要业务逻辑。 比如一个用户注册了，我们该给他发一封邮件确认，这个发邮件的动作就可以通过signal触发。实例代码可以参考django源码中，auth 用户login的实现。 </p>
<p>如果我希望他能够异步处理信息该怎么做？<br>此处考虑使用Django+celery+RabbitMQ</p>
<p>不知道怎么的，居然把密码和账号放到博客公开了……真是郁闷，明明之前有检查一遍的。还有scriptogr排版是怎么回事！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Django 的Signal，它是同步的，意思是一个请求进来，如果有要出发signal ，就必须等这个signal处理完成，才能返回该请求。</p>
<p>那么他有什么用处呢？<br>剥离和业务无关的逻辑，简化主要业务逻辑。 比如一个用户注册了，我们该给他发一封邮件确认，这]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to cerate a theme for Mezzanine app]]></title>
    <link href="http://lifeofszh.cn/2014/06/03/How%20to%20cerate%20a%20theme%20for%20Mezzanine%20app/"/>
    <id>http://lifeofszh.cn/2014/06/03/How to cerate a theme for Mezzanine app/</id>
    <published>2014-06-02T16:00:00.000Z</published>
    <updated>2016-03-14T02:56:04.000Z</updated>
    <content type="html"><![CDATA[<p>前面介绍了Mezzanine，在实战中，又该如何写自己的Theme而不修改Mezzaine。官方给出的说明是酱紫的<a href="http://mezzanine.jupo.org/docs/content-architecture.html" target="_blank" rel="external">Link</a>，看完之后，你可能还是不知道咋整。</p>
<p>不打紧，这里还有一篇老外写的操作<a href="http://bitofpixels.com/blog/mezzatheming-creating-mezzanine-themes-part-1-basehtml/" target="_blank" rel="external">实例</a>，共计四篇，认真操作下来，一般就出师了。<br>不过英文就是人家的东西，毕竟不如中文来得容易理解——英文差，实践中需要磕碰多次，反复研读博文。</p>
<h4 id="u5047_u8BBE_u6211_u4EEC_u8981_u4FEE_u6539blog_u7684_u6A21_u677F"><a href="#u5047_u8BBE_u6211_u4EEC_u8981_u4FEE_u6539blog_u7684_u6A21_u677F" class="headerlink" title="假设我们要修改blog的模板"></a>假设我们要修改blog的模板</h4><ol>
<li>./manage.py startapp theme</li>
<li>在setting.app中添加theme，次序在所有mezzanine前面</li>
<li>由于Mz的默认模板结构是左中右三列的形式，但是我希望简洁的页面比如内容居中，那么这时就需要替换base.html文件了——不是修改源文件，而是在theme中新建一个templates文件夹，添加base.html。接着就是按自己喜欢的模式大刀阔斧修改文件。</li>
<li>在theme.templates下新建blog文件夹，添加blog_post_detail.html——文件名必须与源模板文件相同，因为blog的view函数是默认查找这个文件的。我在上一步中，添加了{ block main_contain }，所以现在可以在blog_post_detail.html中覆盖{ block main_contain }内容，这样你的博客模板内容就定制好叻。</li>
</ol>
<h4 id="u5047_u8BBE_u6211_u8981_u7ED9_u535A_u5BA2_u6DFB_u52A0_u4E00_u4E2A_u53EF_u7F16_u8F91_u7684_u540E_u53F0_u5C5E_u6027_u2014_u2014slide"><a href="#u5047_u8BBE_u6211_u8981_u7ED9_u535A_u5BA2_u6DFB_u52A0_u4E00_u4E2A_u53EF_u7F16_u8F91_u7684_u540E_u53F0_u5C5E_u6027_u2014_u2014slide" class="headerlink" title="假设我要给博客添加一个可编辑的后台属性——slide"></a>假设我要给博客添加一个可编辑的后台属性——slide</h4><ul>
<li><p>在theme中新建一个models.py:</p>
<pre><code>from mezzanine.blog.models import BlogPost

class Slide(Orderable)：
    myblog = models.ForeignKey(BlogPost, related_name=&quot;slides&quot;)
    image = FileField(verbose_name=_(&quot;Image&quot;),upload_to=upload_to(&quot;theme.Slide.image&quot;, &quot;slider&quot;),format=&quot;Image&quot;, max_length=255, null=True, blank=True)
</code></pre></li>
<li><p>同时，还需要在后台添加面板，你才能操作。新建theme.admin：</p>
<pre><code>from .models import  Slide
from mezzanine.core.admin import TabularDynamicInlineAdmin, BaseDynamicInlineAdmin
from mezzanine.blog.admin import BlogPostAdmin 
from mezzanine.blog.models import BlogPost

class SlideInline(TabularDynamicInlineAdmin):
        model = Slide

class MyBlogPostAdmin(BlogPostAdmin):
    inlines = (SlideInline,)

admin.site.register(BlogPost, MyBlogPostAdmin)
</code></pre></li>
</ul>
<p>TabularDynamicInlineAdmin，是集成django的TabularInlineAdmin，主要为页面内编辑提供模板。运行后，即可在后台博客中见到一个Slide行，可以添加多个图片。</p>
<ul>
<li><p>最后自然是在模板中，添加元素了。</p>
<pre><code>{ for slide in blogpost.slide.all }
    slide html
{ endfor }
</code></pre></li>
</ul>
<p>写的有些简略，大致的思路和方向是这样的，我也是在做的过程中，慢慢摸索。欢迎大家指正，一起讨论。</p>
<h4 id="OT-_u5199_u4E0D_u597D_u524D_u7AEF_u4EE3_u7801_u7684_u540E_u7AEF_u8BBE_u8BA1_u5E08_uFF0C_u4E0D_u662F_u597D_u7684_u4EA7_u54C1_u7ECF_u7406"><a href="#OT-_u5199_u4E0D_u597D_u524D_u7AEF_u4EE3_u7801_u7684_u540E_u7AEF_u8BBE_u8BA1_u5E08_uFF0C_u4E0D_u662F_u597D_u7684_u4EA7_u54C1_u7ECF_u7406" class="headerlink" title="OT.写不好前端代码的后端设计师，不是好的产品经理"></a>OT.写不好前端代码的后端设计师，不是好的产品经理</h4><p>前端代码，真的很让人闹心啊！但是一个产品的心，又让我觉得自己做的页面，实在是惨不忍睹，无奈让身怀六甲的老婆替我写了部分前端页面。虽然达不到完美，却也离满意更近了一步。有时候确实是希望自己能更加专心，更加聪明，能够三头六臂。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前面介绍了Mezzanine，在实战中，又该如何写自己的Theme而不修改Mezzaine。官方给出的说明是酱紫的<a href="http://mezzanine.jupo.org/docs/content-architecture.html" target="_blan]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Php的gbk与Python的utf8处理]]></title>
    <link href="http://lifeofszh.cn/2014/05/27/deal%20with%20php%20gbk%20and%20python%20utf8/"/>
    <id>http://lifeofszh.cn/2014/05/27/deal with php gbk and python utf8/</id>
    <published>2014-05-26T16:00:00.000Z</published>
    <updated>2016-03-14T02:54:55.000Z</updated>
    <content type="html"><![CDATA[<p>客户端（discuz的插件）由于采用gbk或gb2312编码，导致json_encode无法正常将字符转为json格式，即中文字符显示为空。</p>
<pre><code>All string data must be UTF-8 encoded.
</code></pre><p>所以就有两个思路，一是将信息转为utf8再json化，二是将信息urlencode一下，再json化。偷懒，直接谷歌找到第二种方式的实现</p>
<pre><code>function arrayRecursive(&amp;$array, $function, $apply_to_keys_also = false)
    {
        foreach ($array as $key =&gt; $value) {
            if (is_array($value)) {
                arrayRecursive($array[$key], $function, $apply_to_keys_also);
            } else {
                $array[$key] = $function($value);
            }

            if ($apply_to_keys_also &amp;&amp; is_string($key)) {
                $new_key = $function($key);
                if ($new_key != $key) {
                    $array[$new_key] = $array[$key];
                    unset($array[$key]);
                }
            }
        }
    }

function var_json_encode($var) {
    $_var = $this-&gt;arrayRecursive($var, &apos;urlencode&apos;, false);
    $_str = json_encode($var);
    return $_str;
}
</code></pre><p>服务端Django接收到信息后，将做json_decode，但识别出来的是一堆乱码，百思不得其解。</p>
<pre><code>urldecode_data = urllib.unquote(v)
</code></pre><p>查了很久<a href="http://stackoverflow.com/questions/5139249/python-url-unquote-unicode" target="_blank" rel="external">资料</a>，才发现，原来此时的v是unicode，直接拿来decode(‘utf8’)或者’gbk’ 要么乱码要么报错</p>
<p>正确地做法应该是</p>
<pre><code>urldecode_data = urllib.unquote(str(v))
</code></pre><p>在Django写入db时，如果字典的key是unicode，也会报错，所以这里也需要注意。</p>
<p>附上python端的转码代码：</p>
<pre><code>def urldecode_to(dict_data):
new = {}
for k, v in dict_data.items():
    urldecode_data = urllib.unquote(str(v))
    try:
        unicode_data = unicode(urldecode_data, &apos;utf-8&apos;)
    except Exception, e:
        print &quot;error in urldecode_data encode utf8&quot;
        try:
            unicode_data = unicode(urldecode_data, &apos;gbk&apos;)
        except Exception, e:
            print &quot;error in urldecode_data encode GB2312&quot;
            raise e
    new[str(k)] = unicode_data
return new
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>客户端（discuz的插件）由于采用gbk或gb2312编码，导致json_encode无法正常将字符转为json格式，即中文字符显示为空。</p>
<pre><code>All string data must be UTF-8 encoded.
</code></pre]]>
    </summary>
    
      <category term="php" scheme="http://lifeofszh.cn/tags/php/"/>
    
      <category term="python" scheme="http://lifeofszh.cn/tags/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[stand answer]]></title>
    <link href="http://lifeofszh.cn/2014/05/13/about%20stand%20anwser/"/>
    <id>http://lifeofszh.cn/2014/05/13/about stand anwser/</id>
    <published>2014-05-12T16:00:00.000Z</published>
    <updated>2016-03-14T02:46:27.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u5173_u4E8E_u6807_u51C6_u7B54_u6848"><a href="#u5173_u4E8E_u6807_u51C6_u7B54_u6848" class="headerlink" title="关于标准答案"></a>关于标准答案</h3><p>读柴静的《看见》，书中的一个人说他的父母没有把他当成傻瓜，没有让他做那种考傻瓜的练习题，比如说“用直线把词语连接起来”，这种练习只能把一个人有创造能力的思维变得标准化。 </p>
<p>有一些词语，像：‘心急吃不了热豆腐’，‘步步为营’，还有一些词语，比如：‘打铁趁热’，‘当机立断’。他们是对立的，课本告诉你他们的意义，但是，它没有告诉你，在生活中，什么时候该‘心急’，什么时候得‘趁热’。又或者两个答案都是适用的。</p>
<p>柴静在坎坷中发现，生活中没有一劳永逸的答案，人们永远要在其中不断摸索，思考。相比之下，在试卷里写上预设的正确答案，就轻松多了——根本不需要动脑筋呀——只要记住标准答案，或者标准模式即可。</p>
<p>我不禁自问，老师的作用是什么，好老师是什么样的，甚至是怎样才能成为伟大的老师？ 好与伟大的差别在哪里？</p>
<h3 id="u77E5_u8BC6_u548C_u521B_u9020_u529B"><a href="#u77E5_u8BC6_u548C_u521B_u9020_u529B" class="headerlink" title="知识和创造力"></a>知识和创造力</h3><p>汉堡美术学院在录取卢安达时，教授们的看法是：“已经有知识的人不需要更多地知识，缺少的创造性。但给卢安达这个只有创造性的人增加知识，他就可以实现他头脑里的东西了。” 卢安达，不通过高考就进入了大学。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u5173_u4E8E_u6807_u51C6_u7B54_u6848"><a href="#u5173_u4E8E_u6807_u51C6_u7B54_u6848" class="headerlink" title="关于标准答案"></a>关于标准答案</h3]]>
    </summary>
    
      <category term="阅读" scheme="http://lifeofszh.cn/tags/%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Run Django on Apache by uwsgi]]></title>
    <link href="http://lifeofszh.cn/2014/04/28/Run%20Django%20on%20Apache%20by%20uwsgi%20/"/>
    <id>http://lifeofszh.cn/2014/04/28/Run Django on Apache by uwsgi /</id>
    <published>2014-04-27T16:00:00.000Z</published>
    <updated>2016-03-14T02:53:25.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u524D_u63D0_u73AF_u5883_uFF1A"><a href="#u524D_u63D0_u73AF_u5883_uFF1A" class="headerlink" title="前提环境："></a>前提环境：</h3><ul>
<li>CentOS</li>
<li>python2.7</li>
</ul>
<h3 id="u6B65_u9AA4"><a href="#u6B65_u9AA4" class="headerlink" title="步骤"></a>步骤</h3><ol>
<li>安装mod_uwsgi模块</li>
<li>配置uwsgi.ini文件</li>
<li>配置apache文件</li>
</ol>
<h4 id="u5B89_u88C5mod_uwsgi_uFF1A"><a href="#u5B89_u88C5mod_uwsgi_uFF1A" class="headerlink" title="安装mod_uwsgi："></a>安装mod_uwsgi：</h4><p>由于apache对uwsgi的支持没有ngxin好（建议用ngxin），所以里面用到的模块mod_uwsgi.so需要手工安装。<br>下载<a href="https://raw.github.com/unbit/uwsgi/master/apache2/mod_uwsgi.c" target="_blank" rel="external">mod_uwsgi.c</a>, 用Apache的apxs编译（部分系统可能没有该命令）——yum search httpd-devel， 安装对应的包即可。<br>最后sudo apxs -i -a -c mod_uwsgi.c，系统会自动在http.conf中添加LoadModule uwsgi_module modules/mod_uwsgi.so</p>
<h4 id="u914D_u7F6Euwsgi-ini_u6587_u4EF6"><a href="#u914D_u7F6Euwsgi-ini_u6587_u4EF6" class="headerlink" title="配置uwsgi.ini文件"></a>配置uwsgi.ini文件</h4><pre><code>[uwsgi]
touch-reload=/var/www/site (程序目录)
socket = 127.0.0.1:8080 (端口)
workers = 2 （线程）
chdir = /var/www/site  
env = DJANGO_SETTINGS_MODULE=meals.settings_pro (指定settng文件)
module = django.core.handlers.wsgi:WSGIHandler()
</code></pre><p>这个文件可以直接放在    /var/www/site 目录下</p>
<p>哪我们还需要一个脚本去启动django</p>
<pre><code>//启动脚本
source ~/.bashrc //注意uwsgi可以指定python工作目录，所以可以不必像此处加载virtualenvwrapper
workon rest //进入指定py环境
NAME=&quot;meals&quot; (项目名称)
if [ ! -n &quot;$NAME&quot; ];then
echo &quot;no arguments&quot;
exit;
fi

echo $NAME
//检查是否有在运行的项目文件, 有即kill
ID=`ps -ef | grep &quot;$NAME&quot; | grep -v &quot;$0&quot; | grep -v &quot;grep&quot; | awk &apos;{print $2}&apos;`
echo $ID
echo &quot;################################################&quot;
for id in $ID
do
kill -9 $id
echo &quot;kill $id&quot;
done
echo  &quot;################################################&quot;
//用uwsgi启动, --daemonize标示后台，指定log文件和ini文件
uwsgi --ini /var/www/site/uwsgi_meals.ini --daemonize /var/www/site/log_meals.log
</code></pre><p>chmod o+x startup.sh文件， sh startup.sh 即可启动django</p>
<h4 id="Aapche_u914D_u7F6E"><a href="#Aapche_u914D_u7F6E" class="headerlink" title="Aapche配置"></a>Aapche配置</h4><p>因为对Apache的配置不是很熟悉，摸索了一天之久。</p>
<pre><code>&lt;VirtualHost *:80&gt;
    ServerAdmin xxx@gmail.com
    ServerName xxx.com
    ServerAlias www.xxx.com

    DocumentRoot /var/www

    &lt;Directory &gt;&lt;/Directory&gt;
        Options FollowSymLinks Indexes
        AllowOverride None
    &lt;/Directory&gt;

    &lt;Directory /var/www&gt;&lt;/Directory&gt;
        Options Indexes FollowSymLinks MultiViews
        AllowOverride None
        Order allow,deny
        allow from all
    &lt;/Directory&gt;

    &lt;Location &gt;
        Options FollowSymLinks Indexes
        SetHandler uwsgi-handler
        uWSGISocket 127.0.0.1:8080
    &lt;/Location&gt;
    &lt;Location /static&gt;
         SetHandler none
    &lt;/Location&gt;

    Alias /static /var/www/xxx/static

   &lt;/VirtualHost&gt;
</code></pre><h5 id="u83DC_u9E1F_u72AF_u9519_u7684_u8303_u4F8B"><a href="#u83DC_u9E1F_u72AF_u9519_u7684_u8303_u4F8B" class="headerlink" title="菜鸟犯错的范例"></a>菜鸟犯错的范例</h5><p>一开始弄错，将项目文件放在root下结果apache无法读取静态文件（因为没有权限）</p>
<p>再后来项目移到/var/www/下，又出现apache静态文件404。</p>
<pre><code>DocumentRoot /var/www/
Alias /static /var/www/app.chifaxian.com/static
&lt;Directory /var/www/app.chifaxian.com/static&gt;
   SetHandler None
   Order allow,deny
    Allow from all
&lt;/Directory&gt;
&lt;Location &gt;&lt;/Location&gt;
    SetHandler uwsgi-handler
    uWSGISocket 127.0.0.1:8080
&lt;/Location&gt;

//没有添加如下代码：结果找不到文件显示404
&lt;Location /static&gt;
            SetHandler none
   &lt;/Location&gt;
</code></pre><p>  最后重启 service httpd restart</p>
<p>  访问成功.</p>
<p> 一路上翻了很多博客和资料，因为没有深入理解apache配置，所以花了很多时间。</p>
<h4 id="u53C2_u8003_u8D44_u6599"><a href="#u53C2_u8003_u8D44_u6599" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="http://adf.ly/l9FgB" target="_blank" rel="external">Apache+uwsgi+django基于目录配置站点</a></li>
<li><a href="http://adf.ly/l9FRc" target="_blank" rel="external">Setting up Django with Apache and uwsgi on Ubuntu 12.10</a></li>
<li><a href="http://toytoygogie.blogspot.sg/2010/04/centos-apxs-command-not-found.html" target="_blank" rel="external">CentOS “apxs” command not found</a>需要翻墙 </li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u524D_u63D0_u73AF_u5883_uFF1A"><a href="#u524D_u63D0_u73AF_u5883_uFF1A" class="headerlink" title="前提环境："></a>前提环境：</h3><ul>
<li>Cent]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于 Discuz 插件的开发]]></title>
    <link href="http://lifeofszh.cn/2014/04/24/Php%20On%20Discuz%20addon%20develop%20/"/>
    <id>http://lifeofszh.cn/2014/04/24/Php On Discuz addon develop /</id>
    <published>2014-04-23T16:00:00.000Z</published>
    <updated>2016-03-14T02:51:22.000Z</updated>
    <content type="html"><![CDATA[<p>第一次接触PHP, 我可以说怎么会有那么不好用的语言吗？ 不伦不类的，既不是C，又没有Python的简洁——Py粉吐槽完毕</p>
<p>好吧，我的任务是写一个系统用于监控各个论坛的帖子内容，一旦有敏感词，就立马报警。经过一番讨论，打算采用方案一： 前端用DZ的插件形式发送数据到后台，后台负责审查、报警和设置。 至于方案二、三，以后再讨论是怎么pass的。</p>
<p>今天要说的是我如何征服Discuz 插件的。另外我又要吐槽DZ了，作为一个国内比较成功的论坛框架，网路上居然没有什么关于开发插件的资料——大部分都是写一半，而后一半是要收费的…… 我想站长们都是想钱的主，都不乐于贡献代码和想法啊。 </p>
<p>我对Php既不熟悉，对Discuz的经验，也仅是停留在注册，发帖的水平。作为一个有开发经验的PHP菜鸟，该怎么做呢？</p>
<p>首先当然是找资料了，找到如下：</p>
<ol>
<li>《Php与Mysql Web开发》 初步了解Php是怎么回事</li>
<li>《Discuz源码分析与插件开发》初步了解Discuz怎么回事</li>
<li>Discuz自己的开发文档 学着开发一个测试插件，比如echo ‘hello world’</li>
</ol>
<p>凭以上资料，你大概能对PHP和DZ 插件开发有大致的感觉了，接着就是读源码，看名字猜函数用处了。</p>
<p> 我的计划是：插件定时将当天的帖子信息发到后台端口。不过因为我对PHP并不熟悉，又考虑在后端利用celery启一个定时Worker, 定时向插件索要当天的数据。这样做的好处是充分利用后端开发的优势，简化插件开发。</p>
<p> 但是在摸索的过程中，发现在DZ中开一个第三方模块（对外接口），需要对源码修改。显然不合符DRY的开发原则，做不到即插即用，还能算插件吗？！而我也不愿意退回原始计划，怎么办？</p>
<p> 通常解决一个问题，在没有思路的情况下，需要再多问几个问题，和多想几个可能性。比如我为何不放弃定时发送，改为实时发送信息呢？ 那么如果实时发送，又需要哪些东西呢？ DZ有没有现成的一个接口可以监听用户的发帖动作？好有了上述问题，接着就是去问度娘（含谷歌）了。可是她什么也不知道！问同事，同事也不知道。那问问源码吧，找不到……</p>
<p> 又是死路？ 我就说码农拼得不单单是体力，还有创意啊。就在我心灰意冷，万念俱灰的时候，灵光一闪：有没有现成的插件能做到监听发帖动作的。如果有，就表示有可能。</p>
<p> 好在运气不差，在搜了半天后，找到一款免费版本插件——发帖邮件通知——免费版的，只能监听一个板块。但是无所谓了，只要有源码，我就能懂！</p>
<p> 在该插件的基础上，删删改改，发帖测试下——成功收到POST信息！这对我无疑是巨大的鼓舞。后面要做的，就是摸清这个是怎么运作的，并按需求修改。</p>
<h4 id="u7F51_u4E0A_u627E_u5230_u4E00_u4E2APHP_POST_u8BF7_u6C42_uFF0C_u633A_u7BA1_u7528"><a href="#u7F51_u4E0A_u627E_u5230_u4E00_u4E2APHP_POST_u8BF7_u6C42_uFF0C_u633A_u7BA1_u7528" class="headerlink" title="网上找到一个PHP POST请求，挺管用"></a>网上找到一个PHP POST请求，挺管用</h4> <script src="https://gist.github.com/Mark-Shine/11243497.js"></script>

<p><a href="http://adf.ly/kmbEK" target="_blank" rel="external">Celery 定时任务</a>， 文档很详细，看一下就会用的吧</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次接触PHP, 我可以说怎么会有那么不好用的语言吗？ 不伦不类的，既不是C，又没有Python的简洁——Py粉吐槽完毕</p>
<p>好吧，我的任务是写一个系统用于监控各个论坛的帖子内容，一旦有敏感词，就立马报警。经过一番讨论，打算采用方案一： 前端用DZ的插件形式发送]]>
    </summary>
    
      <category term="php" scheme="http://lifeofszh.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django's Url]]></title>
    <link href="http://lifeofszh.cn/2014/04/19/djangos-url/"/>
    <id>http://lifeofszh.cn/2014/04/19/djangos-url/</id>
    <published>2014-04-19T02:13:00.000Z</published>
    <updated>2016-03-14T02:35:20.000Z</updated>
    <content type="html"><![CDATA[<p>之前做项目，最烦的就是改动URL，因为要改的往往不止一个地方。</p>
<p>最近闲着研究一个国外的博客框架mezzanine，基于Django。 View中重定向的地方，都是写着reverse, 好奇查了下，居然是Django自带的。顺藤摸瓜，网上搜了下Url 标签。</p>
<p><code>利用url 标签之后，不管urlpatterns里的某个地址叫法怎么改变，Templates里的地址都不用修改了。在模版中调用url标签的时候，需要：{ load url from future }</code></p>
<p>原来如此，终于可以不用再来回折腾了。由此可见，闭门造车，是造成效率低下的原因之一啊！</p>
<p>网上已经有说明了，我就不啰嗦了。</p>
<p><a href="http://www.yihaomen.com/article/python/355.htm" target="_blank" rel="external">参考地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>之前做项目，最烦的就是改动URL，因为要改的往往不止一个地方。</p>
<p>最近闲着研究一个国外的博客框架mezzanine，基于Django。 View中重定向的地方，都是写着reverse, 好奇查了下，居然是Django自带的。顺藤摸瓜，网上搜了下Url 标签。</]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Wrist Friendly Dictionary]]></title>
    <link href="http://lifeofszh.cn/2014/01/21/wrist-friendly-dictionary/"/>
    <id>http://lifeofszh.cn/2014/01/21/wrist-friendly-dictionary/</id>
    <published>2014-01-21T09:10:00.000Z</published>
    <updated>2016-03-14T02:49:45.000Z</updated>
    <content type="html"><![CDATA[<p>希望能这样：</p>
<pre><code>In [24]: c = easyaccessdict()
In [24]: c.people.name = &apos;roy&apos;

In [25]: c
Out[25]: {&apos;people&apos;: {&apos;name&apos;: &apos;roy&apos;}}
</code></pre><hr>
<p>常用的做法是：</p>
<pre><code>class easyaccessdict(dict):
    def __getattr__(self, name):
        return self[name]
    def __setattr__(self, name, value):
        super(easyaccessdict, self, ).__setitem__(name,value)
    def __missing__(self, name):
        super(easyaccessdict, self, ).__setitem__(name, easyaccessdict())
        return super(easyaccessdict, self,).__getitem__(name)
</code></pre><p><a href="http://adf.ly/cQjWO" target="_blank" rel="external">参考链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>希望能这样：</p>
<pre><code>In [24]: c = easyaccessdict()
In [24]: c.people.name = &apos;roy&apos;

In [25]: c
Out[25]: {&apos;people&apos;: {&]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django Dynamic Query 动态查询]]></title>
    <link href="http://lifeofszh.cn/2014/01/16/django-dynamic-query/"/>
    <id>http://lifeofszh.cn/2014/01/16/django-dynamic-query/</id>
    <published>2014-01-16T05:58:00.000Z</published>
    <updated>2016-03-14T02:32:26.000Z</updated>
    <content type="html"><![CDATA[<p>在项目中，经常会有大量的查询请求，并且每次的查询条件又不大相同。比如查询对象X, 场景A需要根据id做filter, 场景b需要根据staff_id；如果场景不多，那么机械的写几个查询语句也就够了。但是如果遇到大量不同场景，那么动态查询条件就派上用场了！</p>
<p>如果你熟悉关键字的用法，大概不难想到<code>X.objects.filter(**{field: value})</code></p>
<p>再复杂一些，如果filter， 甚至X都想动态，咋整？就拿filter来说吧，是不是有个关键字叫<code>getattr</code>? 对了，就是它： <code>getattr(X.objects, query_method)</code></p>
<p>那么所有的拼在一起就是下面酱紫：</p>
<pre><code>def get_X(field, value, query_method=&quot;filter&quot;):
    &quot;&quot;&quot;query by dynamic field , 
       you can update it for more fields&quot;&quot;&quot;

    query_method = getattr(X.objects, query_method, &quot;&quot;)
    if not query_method:
        return None
    Xs = query_method(**{field: value})
    return Xs
</code></pre><p>举个栗子哈：<code>get_X(&#39;id__in&#39;, [1,2,3,4], &#39;exclude&#39;)</code> 等价于 <code>X.objects.exclude(id__in=[1,2,3,4])</code></p>
<p>以上都是些基本玩法，还有更复杂的，那就看你的业务是否需要到那个级别了——如果超过业务需求，就得不偿失了，因为无形中就提升了维护成本，不好理解。</p>
<p><a href="http://adf.ly/cAmtj" target="_blank" rel="external">参考链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在项目中，经常会有大量的查询请求，并且每次的查询条件又不大相同。比如查询对象X, 场景A需要根据id做filter, 场景b需要根据staff_id；如果场景不多，那么机械的写几个查询语句也就够了。但是如果遇到大量不同场景，那么动态查询条件就派上用场了！</p>
<p>如果]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[随笔]]></title>
    <link href="http://lifeofszh.cn/2014/01/14/140114-100900_/"/>
    <id>http://lifeofszh.cn/2014/01/14/140114-100900_/</id>
    <published>2014-01-14T14:09:00.000Z</published>
    <updated>2016-03-14T02:31:51.000Z</updated>
    <content type="html"><![CDATA[<p>前些天，把手机重置了。结果今天坐班车回来时，找不到以往惯用的新闻软件，百无聊赖下拿起新近才装的ONE。翻开一看，题目是《孤独患者》，作者：陶立夏</p>
<p>原是一篇短文小说，剧情深入，作者的巧妙构思也逐渐成型。击节之余也感慨于文中流露的爱，幽幽暗暗，缱绻在女主身边。又像是蒙着一层纱，虽能看出里面大概的爱意，却硬是不戳破。让读者替男猪脚焦虑万分——“哎呀，傻小子，还不快挑明了说！”  </p>
<p>最后结尾留白许多，男女重逢，一句：“你，是猪吗？”， 落幕。乐观的读者定然在此时放下手中读物，长抒一口。</p>
<p>陶先生似乎想告诉我们：生活是美好的！那些你现在厌恶着的人，和你也许中间有一些美丽的误会——因为种种原因，在当时不能够直说？</p>
<p>送上一句：卿，生日快乐！但愿我们的前嫌将来可以冰释</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>前些天，把手机重置了。结果今天坐班车回来时，找不到以往惯用的新闻软件，百无聊赖下拿起新近才装的ONE。翻开一看，题目是《孤独患者》，作者：陶立夏</p>
<p>原是一篇短文小说，剧情深入，作者的巧妙构思也逐渐成型。击节之余也感慨于文中流露的爱，幽幽暗暗，缱绻在女主身边。又像]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[截屏网页字体设置--phantomjsh或pyQt]]></title>
    <link href="http://lifeofszh.cn/2014/01/09/phantomjshpyqt/"/>
    <id>http://lifeofszh.cn/2014/01/09/phantomjshpyqt/</id>
    <published>2014-01-09T08:22:00.000Z</published>
    <updated>2016-03-14T02:30:44.000Z</updated>
    <content type="html"><![CDATA[<p>脚本会用系统的默认字体截屏，所以我们需要设置系统的。</p>
<blockquote>
<p>Hi,</p>
<p>After having the same issue, I managed to have phantomjs work with the default set of web fonts[1] on Ubuntu 10.04.</p>
<p>First I installed these package to remove the errors that I was getting from Xvfb (run it without &gt; dev/null to see the errors on stdout):<br>    sudo aptitude install xfonts-100dpi xfonts-75dpi xfonts-scalable xfonts-cyrillic</p>
<p>Then I added the multiverse repos and installed:<br>    sudo apt-get install ttf-mscorefonts-installer</p>
<p>After that you have to clean the font cache:<br>    sudo fc-cache -f -v</p>
<p>And here is the Xvfb options that worked for me:<br>    Xvfb :1 -screen 0 800x600x24 -extension GLX &gt; /dev/null 2&gt;&amp;1 &amp;</p>
<p>export DISPLAY=localhost:1.0</p>
<p>Hope it helps,</p>
<p>Tiago</p>
</blockquote>
<p><a href="https://groups.google.com/forum/?fromgroups=#!searchin/phantomjs/font/phantomjs/aVDqzv99G5M/NFmHk7fAZB8J" target="_blank" rel="external">参考链接</a> </p>
]]></content>
    <summary type="html">
    <![CDATA[<p>脚本会用系统的默认字体截屏，所以我们需要设置系统的。</p>
<blockquote>
<p>Hi,</p>
<p>After having the same issue, I managed to have phantomjs work with the default ]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[运维三件套之supervisor]]></title>
    <link href="http://lifeofszh.cn/2013/12/06/supervisor%E7%9B%91%E6%8E%A7tornado%E8%BF%9B%E7%A8%8B/"/>
    <id>http://lifeofszh.cn/2013/12/06/supervisor监控tornado进程/</id>
    <published>2013-12-05T16:00:00.000Z</published>
    <updated>2016-03-14T02:53:59.000Z</updated>
    <content type="html"><![CDATA[<p>在小团队做Web开发，除了得是个后端代码熟练工外，还要懂前端，会运维。</p>
<h4 id="u7528supervisor_u76D1_u63A7tornado_u8FDB_u7A0B"><a href="#u7528supervisor_u76D1_u63A7tornado_u8FDB_u7A0B" class="headerlink" title="用supervisor监控tornado进程"></a>用supervisor监控tornado进程</h4><p>听很多人提到superviosr，翻了翻文档看着挺有用——至少不用自己写shell脚本了。自己摸索，如果是天才，可能一次就成功了；如果是人才，可能试几次就可以了；那像我那么笨得，就多走了好多弯路，像无法使用supervisorctl这类谷歌半天都找不到线索的问题，都碰到过。</p>
<p>此处就不赘述了，附上配置文件：</p>
<pre><code>[unix_http_server]
file=/tmp/supervisor.sock   ;必填

[inet_http_server]    （控制页面设置）
port=9001
username = shiyi
password = 88195929qq

[rpcinterface:supervisor]     ; 必填
supervisor.rpcinterface_factory =supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]    ;设置控制台
serverurl=unix:///tmp/supervisor.sock ; use a     unix:// URL  for a unix socket
username=shiyi
password=shiyi

[supervisord]
logfile_maxbytes=50MB                           ; maximum size of logfile before rotation
logfile_backups=10                              ; number of backed up logfiles
loglevel=error                                  ; info, debug, warn, trace
pidfile=/home/wb-shangzhihai/usr/var/run/supervisord.pid                ; pidfile location
nodaemon=false                                  ; run supervisord as a daemon
minfds=1024                                     ; number of startup file descriptors
minprocs=200                                    ; number of process descriptors
user=wb-shangzhihai                                       ; default user
childlogdir=/home/usersname/usr/logs/supervisord/               ; where child log files will live


[program:webscan-8001]
process_name=webscan1
directory=/home/.../www/designshot/
command=sh start.sh 8001    ;此处是你要执行的脚本
stopsignal=KILL 
killasgroup=true            
stopasgroup=true             
autostart=true                ; supervisord守护程序启动时自动启动tornado
autorestart=true              ; supervisord守护程序重启时自动重启tornado
redirect_stderr=true          ; 将stderr重定向到stdout
stdout_logfile = ~/usr/logs/webscan.log

[supervisorctl]
username=shiyi
password=shiyi
</code></pre><p>如果你遇到supervisor，无法杀死tornado进程的问题，那么就要设置killasgroup, stopasgroup为True。 这两项可以让supervisor找到父进程产生的所以子进程。</p>
<p><strong>启动</strong></p>
<pre><code>supervisord -c xxx.conf
</code></pre><p><strong>管理</strong></p>
<pre><code>supervisorctl 

进入后，可以help，提示命令
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>在小团队做Web开发，除了得是个后端代码熟练工外，还要懂前端，会运维。</p>
<h4 id="u7528supervisor_u76D1_u63A7tornado_u8FDB_u7A0B"><a href="#u7528supervisor_u76D1_u63A7torn]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[截屏那些事儿]]></title>
    <link href="http://lifeofszh.cn/2013/11/16/webpage2png/"/>
    <id>http://lifeofszh.cn/2013/11/16/webpage2png/</id>
    <published>2013-11-15T16:00:00.000Z</published>
    <updated>2016-03-14T02:50:17.000Z</updated>
    <content type="html"><![CDATA[<p>因为业务需要，得在服务端（RHDL5）部署基于Qt的页面截屏。这是一台空白的机器，所以一切得从头开始。比如：</p>
<ol>
<li><p>安装python2.7</p>
</li>
<li><p>安装pip,需要指定python2.7。否则，将用系统默认得2.6生成——这样后面就苦逼了。</p>
</li>
<li><p>安装virtualenv, 指定python2.7。干净独立的运行环境，有利于避免产生一些因为版本问题产生的莫名其妙问题！</p>
</li>
<li><p>Qt-4.8.5, configure蛮重要的，nomake demos ,nomake examples, -qt-jpeglib, -qt-png, -prefix ~/usr/local/Qt-4.8.5, 逐个解释参数的意思：编译的时候不要demo,examples,这样会节省一些时间。同时用qt自带的jpglib,png编译，避免使用系统自带的老旧包（这是个大坑，后期使用会报jpeglib.so.6找不到的错误），指定Qt 安装的路径。然后就是make, make install ,在~/.bashrc中设置qt路径</p>
</li>
<li><p>进入虚拟环境virtualenv，安装Sip和PyQt-4.10.5。configure,make, make install， 三步走。通常都没什么问题，但是我make install的时候报strip ~/…/pyuic, file fomat can’t reconize! 这个错误折腾了三个小时吧。后来发现python 可以直接引用PyQt4的，so 直接忽略这个bug.</p>
</li>
</ol>
<p>那么有了以上准备，差不多可以测试截屏代码了。老外写了个很不错的版本（源码很赞，博客里的解释更赞！）。这里拿来做<a href="http://adf.ly/ZOkyq" target="_blank" rel="external">例子</a>。</p>
<p>在shell里试试，系统报错说 X server 没有。这个如果在ubuntu, mac下一般都好解决。但是！现在的系统是RHEL, 和网上的参考教程差好多。 偶尔找到几个关于RHEL的，提示用yum install xorg-x11-server-Xvfb, 但是找不到包。第二个解决方案是用rpm 安装——这个太痛苦，此货不会自动搜索包，而且包还有很多很多依赖，需要一个个装！</p>
<p>后来问木工UX是怎么装的X server,他说yum啊！郁闷，于是我用yum listinstalled 查看UX，居然有xorg-x11-server-Xvfb！估计是我的系统的yum源太旧了。 查了相关资料，因为红帽不是开源的，要用她的yum源，就要注册缴钱。一种变相更新源的方法就是用Cent OS 的源替代。<br>注：UX另外一台服务器</p>
<p>更新完yum 源，再用yum search xorg-x11-server-Xvfb,果然找到此包。</p>
<p>装好Xvfb, 接下来再跑例子代码，测试成功！</p>
<p><a href="http://adf.ly/ZOm37" target="_blank" rel="external">Create screenshots of a web page using Python and QtWebKit</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>因为业务需要，得在服务端（RHDL5）部署基于Qt的页面截屏。这是一台空白的机器，所以一切得从头开始。比如：</p>
<ol>
<li><p>安装python2.7</p>
</li>
<li><p>安装pip,需要指定python2.7。否则，将用系统默认得2.6生成——]]>
    </summary>
    
      <category term="截屏" scheme="http://lifeofszh.cn/tags/%E6%88%AA%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从后端的角度看Angular之初体验]]></title>
    <link href="http://lifeofszh.cn/2013/11/03/Angular%E4%B9%8B%E5%88%9D%E4%BD%93%E9%AA%8C%20/"/>
    <id>http://lifeofszh.cn/2013/11/03/Angular之初体验 /</id>
    <published>2013-11-02T16:00:00.000Z</published>
    <updated>2016-03-14T02:47:36.000Z</updated>
    <content type="html"><![CDATA[<p>第一次接触Angular, 是在一个老外的博客中，而且居然是谷歌的亲儿子。顿时有了好感，文档写得还比较粗浅，请看一哥们的吐槽：</p>
<blockquote>
<p>I realize the hackers are busy coding and have no time to deal with BS documentation but they are inviting a lot of bad code if they don’t teach us the basics…</p>
</blockquote>
<p>大意：牛逼er们都忙着coding了，根本没时间去完善文档，这只会带来更多的渣代码</p>
<p>这个时候，大神看不下去了，附言。</p>
<blockquote>
<p>All the frameworks with Dependency Injection in its core seem obscure when you get started with them.<br>The best documentations in young frameworks like this one unfortunately is reading the source. Hard work but it’s worthy because you learn a lot in the process</p>
</blockquote>
<p>大意：一个年轻框架最好的文档其实是它的源码。可能读起来很难，不过相比之下，你获得的，也是超值的。</p>
<p>大神前面其实给了一些建议包括参考的网站，不过楼上一直觉得文档太差看不下去，所以给了上面这段（<a href="http://docs.angularjs.org/api/AUTO.$provide#factory" target="_blank" rel="external">节选</a>）</p>
<h3 id="u5173_u4E8E_u4EE3_u7801_u8BBE_u8BA1_uFF0Cangular_u662F_u600E_u4E48_u60F3_u7684"><a href="#u5173_u4E8E_u4EE3_u7801_u8BBE_u8BA1_uFF0Cangular_u662F_u600E_u4E48_u60F3_u7684" class="headerlink" title="关于代码设计，angular是怎么想的"></a>关于代码设计，angular是怎么想的</h3><p>在接触angular之前，作为服务端工程师，我接触的js框架其实不多，也就JQuery、KISSY。JQuery给我的印象很友好，前端零基础的小伙子用起来，倒也顺手，而且文档丰富。JQuery算是古典主义的JS框架的优秀代表了。</p>
<p>相比JQuery, Angular的理念更像是用后端的思维去写前端代码。视图和模型是分离的，修改模型，视图相应的就会有变动，是不是和MVC有些相像？</p>
<p>传统模式：</p>
<p><img src="http://docs.angularjs.org/img/One_Way_Data_Binding.png" alt="image"></p>
<p>Angular：</p>
<p><img src="http://docs.angularjs.org/img/Two_Way_Data_Binding.png" alt="image"></p>
<p>原文说明：</p>
<pre><code>They are different because first the template (which is the uncompiled HTML along with any additional markup or directives) is compiled on the browser, and second, the compilation step produces a live view. We say live because any changes to the view are immediately reflected in the model, and any changes in the model are propagated to the view. This makes the model always the single-source-of-truth for the application state, greatly simplifying the programming model for the developer. You can think of the view as simply an instant projection of your model.
Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it. This makes testing a snap because it is easy to test your controller in isolation without the view and the related DOM/browser dependency
</code></pre><p>如果明天考试，那重点肯定是这句了：<code>Because the view is just a projection of the model, the controller is completely separated from the view and unaware of it</code> 大意: View、Model是相关的，控制层则是独立的</p>
<h3 id="u6211_u8981_u60CA_u8273_u5168_u573A"><a href="#u6211_u8981_u60CA_u8273_u5168_u573A" class="headerlink" title="我要惊艳全场"></a>我要惊艳全场</h3><p>光说原理其实还不足以惊艳到我，因为尼玛太抽象。作为前端菜鸟我们从来不看资料，看疗效。</p>
<p>有一天，我看见栖邀在用Angular重写一些项目。我就好奇的问他，这个有什么好用的吗？虽然我知道他是很牛逼的框架——大家都这么说（道听途说）</p>
<p>栖邀拂了下他那油光发亮的秀发，一甩脑袋，说：“哇靠，这个框架很好用诶！你看……”</p>
<p>后来看到的效果，让我久久不能忘怀。直接导致我在后来的项目中，一遇到前端问题，就考虑如果用Angular应该咋做。可惜此处不能直接展示效果，附上<a href="http://angularjs.org/" target="_blank" rel="external">链接</a>，各位自己感受吧。</p>
<h3 id="Django_u9047_u4E0AAngular_u7684_u77DB_u4E0E_u76FE"><a href="#Django_u9047_u4E0AAngular_u7684_u77DB_u4E0E_u76FE" class="headerlink" title="Django遇上Angular的矛与盾"></a>Django遇上Angular的矛与盾</h3><p>做为一个学习Django开发的半吊子工程师，想要用 Angular 遇到的第一个问题就是“如何将两者和谐的捏在一起”。 因为Django自带模板系统，而Angular 并不需要Django输出页面，它要的很简单：吐给我足够的数据就可以了，至于页面我自己可以handle。</p>
<p>如果你想使用Angular的快捷与舒适，那么就必须做些牺牲：重构模板甚至文件结构。Django只要把必要的数据吐到一个数据页面，然后由Anugalr的Controller读取数据，然后生成页面即可。好处也很明显，你可以欢快轻便的用上Angular特性。</p>
<p>举个栗子哟！</p>
<p>有一张待办表，我在页面勾选完成后，前端删除该条内容。相应的，后续条目的序号应该重新排位，像原先的2、3、4、5,就升为到1、2、3、4了。这样一个小需求，如果用传统方法做，可能会挺复杂。如果用Angular的ngRepeat生成列表条目，那么一旦页面有变动，比如删除第一条。那么后续的条目的index（即为序号）会自动更新，你甚至什么都需要做，Angular已经为你准备好需要的一切了。</p>
<p>但这有一个前提，就是页面的条目是由ngRepeat循环生成的，换句话说，就是你要重构模板页面的代码！！！是重构、还是用JQuery直接实现，孰轻孰重，亲们自己感受吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>第一次接触Angular, 是在一个老外的博客中，而且居然是谷歌的亲儿子。顿时有了好感，文档写得还比较粗浅，请看一哥们的吐槽：</p>
<blockquote>
<p>I realize the hackers are busy coding and have no tim]]>
    </summary>
    
      <category term="angular" scheme="http://lifeofszh.cn/tags/angular/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2013-10-14]]></title>
    <link href="http://lifeofszh.cn/2013/10/14/2013-10-14/"/>
    <id>http://lifeofszh.cn/2013/10/14/2013-10-14/</id>
    <published>2013-10-13T16:00:00.000Z</published>
    <updated>2016-03-14T02:25:55.000Z</updated>
    <content type="html"><![CDATA[<h3 id="u521B_u5EFA_u591A_u4E2Assh_id_for_Mac_OSX_2C_GitBash_2C_and_Linux"><a href="#u521B_u5EFA_u591A_u4E2Assh_id_for_Mac_OSX_2C_GitBash_2C_and_Linux" class="headerlink" title="创建多个ssh id for Mac OSX, GitBash, and Linux"></a>创建多个ssh id for Mac OSX, GitBash, and Linux</h3><p>因为业务需要，不得不考虑用多个id连接服务器，在此考虑这个<a href="https://confluence.atlassian.com/pages/viewpage.action?pageId=271943168" target="_blank" rel="external">教程</a></p>
<pre><code>1. ssh-keygen -f ~/.ssh/personalid -C &quot;personalid
2. vim ~/.ssh/config
3. Host workdid
   HostName bitbucket.org
   IdentityFile ~/.ssh/workdid
   Host personalid
   HostName bitbucket.org
   IdentityFile ~/.ssh/personalid
</code></pre><p>完毕</p>
<h3 id="u5176_u4ED6"><a href="#u5176_u4ED6" class="headerlink" title="其他"></a>其他</h3><p>从维修点，拿回更换了ssd的air<br>安妮耳朵坏了，医生说修一下要2500＋<br>带安妮看完医生，回家路上，女朋友的手机落在租车上<br>最近睡不好，梦到故人</p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="u521B_u5EFA_u591A_u4E2Assh_id_for_Mac_OSX_2C_GitBash_2C_and_Linux"><a href="#u521B_u5EFA_u591A_u4E2Assh_id_for_Mac_OSX_2C_GitBash_2C]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[vim 编辑远程文件]]></title>
    <link href="http://lifeofszh.cn/2013/09/24/vim%20edit%20remotely/"/>
    <id>http://lifeofszh.cn/2013/09/24/vim edit remotely/</id>
    <published>2013-09-23T16:00:00.000Z</published>
    <updated>2016-03-14T02:54:14.000Z</updated>
    <content type="html"><![CDATA[<pre><code>scp -r -P 3389 ada@ued.etao.net:/path1/  ~/Download/path2/
</code></pre><p>上面这个命令，用来从远程端拷贝文件到本地路径，如果没有加过ids_pub，则需要-c 输入密码了</p>
<p>那么如何用vim打开远程端的文件呢？<br>一般的思路是：</p>
<ol>
<li>从远程拷贝文件到到本地</li>
<li>修改</li>
<li>上传回远程端</li>
</ol>
<p>如果vim 能够直接打开scp的文件就好了</p>
<pre><code>vim scp://ada@ued.etao.net/../../tgdemand/views.py
</code></pre><p>还有一些同学对此做了扩展：<a href="http://jeetworks.org/node/102" target="_blank" rel="external">Editing Remote Files with Your Local Vim Using the SCP Protocol … with Bash Completion!</a></p>
<p>最近在研究用pyqt做网页截屏…… 虽然在本地是能够截屏，但在那悲催的虚拟机里，尼玛就是不停出现segmention fault …… </p>
]]></content>
    <summary type="html">
    <![CDATA[<pre><code>scp -r -P 3389 ada@ued.etao.net:/path1/  ~/Download/path2/
</code></pre><p>上面这个命令，用来从远程端拷贝文件到本地路径，如果没有加过ids_pub，则需要-c 输入密码了</p>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[批量删除git分支]]></title>
    <link href="http://lifeofszh.cn/2013/09/10/bulk_delete_git_branch/"/>
    <id>http://lifeofszh.cn/2013/09/10/bulk_delete_git_branch/</id>
    <published>2013-09-09T16:00:00.000Z</published>
    <updated>2016-03-14T02:48:42.000Z</updated>
    <content type="html"><![CDATA[<p>  本地和远程创建了太多的git分支，每次清理都需要敲大量命令——相当枯燥，关键效率还很低，于是就写了下面两条命令执行本地和远程分支的删除</p>
<h4 id="u521D_u7EA7_u9B54_u6CD5_uFF1A"><a href="#u521D_u7EA7_u9B54_u6CD5_uFF1A" class="headerlink" title="初级魔法："></a>初级魔法：</h4><p>  要删除本地，首先要考虑以下三点</p>
<ul>
<li>列出所有本地分支   </li>
<li>搜索目标分支如：所有含有‘dev’的分支</li>
<li>将搜索出的结果传给删除函数</li>
</ul>
<p>所以我们可以得到：</p>
<pre><code>git br |grep &apos;dev&apos; |xargs git br -d
</code></pre><h4 id="u7BA1_u9053"><a href="#u7BA1_u9053" class="headerlink" title="管道"></a>管道</h4><p>  频繁用于命令间的通信，比如此处可以将<code>git br</code>的结果传递给<code>grep &#39;dev&#39;</code>，其用法也是相当简单只要’|’连接两个命令即可<br>  还有类似 <code>ps -ef | grep &#39;uwsgi&#39;</code>的命令组合查找uwsgi的进城</p>
<h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><p> grep 可以用于在文件或流中查找匹配的结果，如grep ‘abc’ <em>*/\</em>*.py查找当前目录下全部含有’abc’字符串的文件 并打印出结果</p>
<h4 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a>xargs</h4><p>  将前命令的执行结果作为参数传递给后一条命令。此处，我们是将所有含’dev’字符的分支名传递给<code>git br -d</code></p>
<h3 id="u9AD8_u7EA7_u9B54_u6CD5_uFF1A"><a href="#u9AD8_u7EA7_u9B54_u6CD5_uFF1A" class="headerlink" title="高级魔法："></a>高级魔法：</h3><p>  删除远程分支git命令是：<code>git push origin :dev</code>相当于push一个空的分支覆盖远程分支<br>  那么远程能否参考本地删除来做呢？——大体方向是对，不就是获得分支名，传给删除函数执行嘛</p>
<pre><code>git br -r| grep &apos;dev&apos; |xargs git push origin :
</code></pre><p>  但执行结果显然和我的预期不符，系统最后执行的命令类似于这样：</p>
<pre><code>git push origin origin/dev/fix:
</code></pre><p>  显然 xargs 是将参数传到了:的前一位，而不是我们预期的后一位。解决的办法是？</p>
<pre><code>xargs -i {} func  :{}
</code></pre><p>  用 {} 表示传递过来的参数填充的位置<br>  于是我们有了:</p>
<pre><code>git br -r | grep &apos;dev&apos; | xargs -i {} git push origin :{}
</code></pre><p>  大功告成？——自然没有。系统执行是：<code>git push origin :origin/dev/fix</code><br>  原来grep出来的结果虽然是我们需要的分支，但它包含了origin，显然git 命令不会那么聪明的识别到<br>  所以我们只能再辛苦点把前面的origin去掉咯。找了蛮久，满足要求的命令有sed 和awk，此处就先试试awk吧</p>
<h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><p>  awk可谓上古神器也。其用法，都能写一本书啦……因为语法复杂，花了一点临时学了下。我们的目的很简单删掉origin，下面就看看怎么用牛刀来杀鸡<br>  <code>awk -F &#39;[/]&#39; &#39;/1\/master/ {printf &quot;%s/%s/%s\n&quot;, $2,$3,$4}&#39;</code> -F，设定分隔符为/, 匹配所有1/master的分支名（注意转义/），格式化输出<code>origin/1/master/fix</code> 分割后$1就代表origin,$3代表master 以此类推。所以在printf中格式化输出</p>
<p>好绕了那么多圈，现在终于可以把所有的拼在一起，然后痛快删掉远程那二十多个分支了</p>
<pre><code>git br -r |awk -F &apos;[/]&apos; &apos;/1\/master/ {printf &quot;%s/%s/%s\n&quot;, $2,$3,$4}&apos; |xargs -I {} git push origin :{}
</code></pre><p>注：br 是branch的缩写</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>  本地和远程创建了太多的git分支，每次清理都需要敲大量命令——相当枯燥，关键效率还很低，于是就写了下面两条命令执行本地和远程分支的删除</p>
<h4 id="u521D_u7EA7_u9B54_u6CD5_uFF1A"><a href="#u521D_u7EA7_u9]]>
    </summary>
    
      <category term="git" scheme="http://lifeofszh.cn/tags/git/"/>
    
      <category term="linux" scheme="http://lifeofszh.cn/tags/linux/"/>
    
  </entry>
  
</feed>
